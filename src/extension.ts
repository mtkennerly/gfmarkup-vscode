import * as vscode from 'vscode';
import { scanForGfm, openPreview } from './commands';
import { Config } from './config';
import { diagnoseIssues, GfmFoldingRangeProvider } from './editor';

function setConfig() {
    const config = vscode.workspace.getConfiguration();
    let existing: Array<Object> = [];
    const globalRules = config.inspect<Array<Object>>("editor.tokenColorCustomizations.textMateRules");
    if (globalRules !== undefined) {
        existing = globalRules.globalValue || [];
    }
    const pruned = existing.filter(v => {
        return ((v as any)["name"] || "") !== "gfmarkup-autogenerated";
    });
    const addition = Config.getTextMateRules();
    vscode.workspace.getConfiguration().update(
        "editor.tokenColorCustomizations",
        { "textMateRules": [...pruned, ...addition] },
        vscode.ConfigurationTarget.Global,
    );
}

export function activate(context: vscode.ExtensionContext) {
    setConfig();
    const config = Config.load();

    if (config.autoScan) {
        scanForGfm();
    }

    context.subscriptions.push(vscode.commands.registerCommand('gfmarkup.scanForGfm', () => {
        if (config.autoScan) {
            return;
        }
        scanForGfm();
    }));

    let previewState: Array<vscode.WebviewPanel> = [];
    context.subscriptions.push(vscode.commands.registerCommand('gfmarkup.openPreview', () => {
        openPreview(previewState);
    }));

    const diagnostics = vscode.languages.createDiagnosticCollection("gfmarkup");
    if (vscode.window.activeTextEditor) {
        diagnoseIssues(vscode.window.activeTextEditor.document, diagnostics);
    }
    context.subscriptions.push(vscode.window.onDidChangeActiveTextEditor(editor => {
        if (editor) {
            diagnoseIssues(editor.document, diagnostics);
        }
    }));
    context.subscriptions.push(vscode.workspace.onDidChangeTextDocument(event => {
        diagnoseIssues(event.document, diagnostics);
    }));

    vscode.languages.registerFoldingRangeProvider("gfmarkup", new GfmFoldingRangeProvider());
}

export function deactivate() { }
